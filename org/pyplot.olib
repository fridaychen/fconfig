:PROPERTIES:
:AUTOINGEST: TRUE
:END:

#+PROPERTY: header-args :var font=(symbol-value '*fc-plot-font*)
#+PROPERTY: header-args+ :var bg=(symbol-value '*fc-plot-bg*)
#+PROPERTY: header-args+ :var dpi=(symbol-value '*fc-plot-dpi*)

#+PROPERTY: header-args+ :var height=0
#+PROPERTY: header-args+ :var width=0

#+PROPERTY: header-args+ :var title=""
#+PROPERTY: header-args+ :var xlabel=""
#+PROPERTY: header-args+ :var ylabel=""
#+PROPERTY: header-args+ :var rotation=0

#+PROPERTY: header-args+ :var output=""
#+PROPERTY: header-args+ :var datafile=""
#+PROPERTY: header-args+ :var datatable=""

#+PROPERTY: header-args+ :var frange=""

#+NAME: plot
#+HEADER: :var f1="" :var l1=""
#+HEADER: :var f2="" :var l2=""
#+HEADER: :var f3="" :var l3=""
#+HEADER: :var f4="" :var l4=""
#+HEADER: :var f5="" :var l5=""
#+HEADER: :var f6="" :var l6=""
#+HEADER:  :var marker="" :var xrange=":,0" :var yrange=":,1:" :var frange=""
#+BEGIN_SRC python :results file
  import fmath.plot as fp
  import numpy as np

  import math

  f = fp.start_plot(
      bg=bg, title=title, font=font, dpi=dpi, height=height, width=width
  )
  f.label(xlabel, ylabel)

  if datatable != "":
      x, y = fp.get_data(
          datatable,
          (float, float),
          ":,%s" % xrange,
          ":,%s" % yrange,
      )

      f.plot(x, y, marker=marker)

  if frange != "":
      min, max = eval(frange)
      xa = np.arange(min, max, 0.1)

      if f1 != "":
          f.plotf(xa, eval(f1), label=l1)
      if f2 != "":
          f.plotf(xa, eval(f2), label=l2)
      if f3 != "":
          f.plotf(xa, eval(f3), label=l3)
      if f4 != "":
          f.plotf(xa, eval(f4), label=l4)
      if f5 != "":
          f.plotf(xa, eval(f5), label=l5)
      if f6 != "":
          f.plotf(xa, eval(f6), label=l6)

  f.rotate_xtick(rotation)
  f.save(output)

  return output
#+END_SRC

#+NAME: plotbar
#+HEADER:  :var xrange="0" :var yrange="1:"
#+BEGIN_SRC python :colnames no :results file
  import fmath.plot as fp

  label, x, y = fp.get_data(
      datatable,
      (None, None, float),
      "0,%s" % yrange,
      "1:,%s" % xrange,
      "1:,%s" % yrange,
  )

  fp.easy_plot(
      output,
      lambda f: f.mbar(x, y, label=label).rotate_xtick(rotation),
      bg=bg,
      title=title,
      font=font,
      dpi=dpi,
      height=height,
      width=width,
      xlabel=xlabel,
      ylabel=ylabel,
  )

  return output
#+END_SRC

#+NAME: plotpie
#+HEADER:  :var xrange="0" :var yrange="1"
#+BEGIN_SRC python :results file
  import fmath.plot as fp

  x, y = fp.get_data(
      datatable,
      (None, float),
      ":,%s" % xrange,
      ":,%s" % yrange,
  )

  fp.easy_plot(
      output,
      lambda f: f.pie(x, y),
      bg=bg, title=title, font=font, dpi=dpi, height=height, width=width
  )

  return output
#+END_SRC

#+NAME: plothist
#+BEGIN_SRC python :var bins=10 :var type="bar" :var delimiter="" :results file
  import fmath.plot as fp

  if delimiter == "":
      delimiter = None

  f = fp.easy_plot(
      output,
      lambda f: f.hist(fp.loadtxt(datafile), bins=bins, type=type),
      bg=bg,
      title=title,
      font=font,
      dpi=dpi,
      height=height,
      width=width,
  )

  return output
#+END_SRC
